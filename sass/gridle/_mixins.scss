// |------------------------------------------------------
// |------------------------------------------------------
// | Mixins
// |------------------------------------------------------
// |------------------------------------------------------

// Responsive helpers mixins :
@mixin gridle_state(
	$state,
	$has-parent : true
) {
	// variables :
	$html-states-classes : _gridle_get_var_value(html-states-classes, $state);
	$debug : _gridle_get_var_value(debug, $state);
	$stateName : _gridle_get_var_value(name, $state);

	// check if is a state :
	@if ($html-states-classes or $debug)
		and $stateName {
		// html class :
		@if $has-parent {
			html#{_gridle_classname("#{$stateName}")} & { @content; }
		} @else {
			html#{_gridle_classname("#{$stateName}")} { @content; }
		}
	}

	// get the media query :
	$q : _gridle_get_media_query($state);

	// make the media query if a query exist :
	@if $q {
		@media #{$q} {
			@content;
		}
	}
	@else
	{
		@content;
	}
}


/**
 * States :
 */
@mixin gridle_states(
	$states,
	$has-parent : true
) {
	
	// loop on each states :
	@each $state in $states
	{
		// variables :
		$html-states-classes : _gridle_get_var_value(html-states-classes, $state);
		$debug : _gridle_get_var_value(debug, $state);
		$stateName : _gridle_get_var_value(name, $state);

		// check if is a state :
		@if ($html-states-classes or $debug)
			and $stateName {
			// html class :
			@if $has-parent {
				html#{_gridle_classname("#{$stateName}")} & { @content; }
			} @else {
				html#{_gridle_classname("#{$stateName}")} { @content; }
			}
		}

		// get the media query :
		$q : _gridle_get_media_query($state);

		// make the media query if a query exist :
		@if $q {
			@media #{$q} {
				@content;
			}
		}
		@else
		{
			@content;
		}
	}
}



// Container mixin :
@mixin gridle_container(
	$state : null
) {
	@include _gridle_container_common($state);
}


// Grid mixin :
// Set the width of the specified grid column :
@mixin gridle(
	$columns,
	$state : null
) {
	// common :
	@include _gridle_grid_common($state);
	// check if need media query :
	@if $state {
		@include gridle_state($state) {
			@include _gridle($columns, $state);
		}
	} @else {
		@include _gridle($columns, $state);
	}
}
@mixin _gridle(
	$columns,
	$state : null
) {
	// vars :
	$context : _gridle_get_var_value(context, $state);
	$name-multiplicator : _gridle_get_var_value(name-multiplicator, $state);
	$gutter-width : _gridle_get_var_value(gutter-width, $state);
	$ie7-support : _gridle_get_var_value(ie7-support, $state);
	$debug : _gridle_get_var_value(debug, $state);
	$debug-show-class-names : _gridle_get_var_value(debug-show-class-names, $state);

	// vars :
	$width : percentage(1 / $context * $columns);

	// set value :
	width:$width;
	
	// ie7 support :
	@if $ie7-support == true {
		*width: expression((this.parentNode.clientWidth/#{$context}*#{$columns} - parseInt(this.currentStyle['paddingLeft']) - parseInt(this.currentStyle['paddingRight'])) + 'px');
	}
	
	// debug :
	@if $debug == true and $debug-show-class-names == true {
		#{$gridle-debug-selector} {
			&:before {
				content:"grid-#{$state}-#{$columns * $name-multiplicator}";
			}
			&.parent:before {
				content:"grid-parent-#{$state}-#{$columns * $name-multiplicator}";
			}
		}
	}
}


// push :
// Push the element of the count of column wanted
@mixin gridle_push(
	$columns,
	$state : null
) {
	// common :
	@include _gridle_push_common($state);

	// check if need media query :
	@if $state {
		@include gridle_state($state) {
			@include _gridle_push($columns,$state);
		}
	} @else {
		@include _gridle_push($columns,$state);
	}
}
@mixin _gridle_push(
	$columns,
	$state : null
) {
	// variables :
	$context : _gridle_get_var_value(context, $state);
	$direction : _gridle_get_var_value(direction, $state);
	$name-multiplicator : _gridle_get_var_value(name-multiplicator, $state);
	$debug : _gridle_get_var_value(debug, $state);
	$debug-show-class-names : _gridle_get_var_value(debug-show-class-names, $state);

	// vars :
	$width : percentage(1 / $context) * $columns;
	@if $direction == rtl { $width : $width*-1; }
	left:$width;

	// debug css :
	@if $debug == true and $debug-show-class-names == true {
		#{$gridle-debug-selector} {
			&:after {
				content:"push-#{$state}-#{$columns * $name-multiplicator}" !important;
			}
		}
	}

}


// pull :
// Pull the element of the count of column wanted
@mixin gridle_pull(
	$columns,
	$state : null
) {
	// common :
	@include _gridle_pull_common($state);

	// check if need media query :
	@if $state {
		@include gridle_state($state) {
			@include _gridle_pull($columns,$state);
		}
	} @else {
		@include _gridle_pull($columns,$state);
	}
}
@mixin _gridle_pull(
	$columns,
	$state : null
) {
	// vars :
	$context : _gridle_get_var_value(context, $state);
	$direction : _gridle_get_var_value(direction, $state);
	$name-multiplicator : _gridle_get_var_value(name-multiplicator, $state);
	$debug : _gridle_get_var_value(debug, $state);
	$debug-show-class-names : _gridle_get_var_value(debug-show-class-names, $state);

	// vars :
	$width : percentage(1 / $context) * $columns;
	@if $direction == rtl { $width : $width*-1; }
	right:$width;

	// debug css :
	@if $debug == true and $debug-show-class-names == true {
		#{$gridle-debug-selector} {
			&:after {
				content:"pull-#{$state}-#{$columns * $name-multiplicator}" !important;
			}
		}
	}
}


// push :
// Push the element of the count of column wanted
@mixin gridle_prefix(
	$columns,
	$state : null
) {
	// common :
	@include _gridle_prefix_common($state);
	
	// check if need media query :
	@if $state {
		@include gridle_state($state) {
			@include _gridle_prefix($columns,$state);
		}
	} @else {
		@include _gridle_prefix($columns,$state);
	}
}
@mixin _gridle_prefix(
	$columns,
	$state : null
) {
	// vars :
	$context : _gridle_get_var_value(context, $state);
	$direction : _gridle_get_var_value(direction, $state);
	$gutter-width : _gridle_get_var_value(gutter-width, $state);
	$name-multiplicator : _gridle_get_var_value(name-multiplicator, $state);
	$debug : _gridle_get_var_value(debug, $state);
	$debug-show-class-names : _gridle_get_var_value(debug-show-class-names, $state);

	// vars :
	$width : percentage(1 / $context) * $columns;

	// set value :
	@if $direction == rtl { margin-right:$width; }
	@else { margin-left:$width; }

	// debug css :
	@if $debug == true and $debug-show-class-names == true {
		#{$gridle-debug-selector} {
			&:after {
				content:"prefix-#{$state}-#{$columns * $name-multiplicator}" !important;
			}
		}
	}
}


// pull :
// Pull the element of the count of column wanted
@mixin gridle_suffix(
	$columns,
	$state : null
) {
	// common :
	@include _gridle_suffix_common($state);

	// check if need media query :
	@if $state {
		@include gridle_state($state) {
			@include _gridle_suffix($columns,$state);
		}
	} @else {
		@include _gridle_suffix($columns,$state);
	}
}
@mixin _gridle_suffix(
	$columns,
	$state : null
) {
	// vars :
	$context : _gridle_get_var_value(context, $state);
	$direction : _gridle_get_var_value(direction, $state);
	$gutter-width : _gridle_get_var_value(gutter-width, $state);
	$name-multiplicator : _gridle_get_var_value(name-multiplicator, $state);
	$debug : _gridle_get_var_value(debug, $state);
	$debug-show-class-names : _gridle_get_var_value(debug-show-class-names, $state);

	// vars :
	$width : percentage(1 / $context) * $columns;
	
	// set value :
	@if $direction == rtl { margin-left:$width; }
	@else { margin-right:$width; }

	// debug css :
	@if $debug == true and $debug-show-class-names == true {
		#{$gridle-debug-selector} {
			&:after {
				content:"suffix-#{$state}-#{$columns * $name-multiplicator}" !important;
			}
		}
	}
}


// grid background :
// Display the grid background debug
@mixin gridle_grid_background(
	$state : null
) {
	// check if need media query :
	@if $state {
		@include gridle_state($state) {
			@include _gridle_grid_background($state);
		}
	} @else {
		@include _gridle_grid_background($state);
	}
}
@mixin _gridle_grid_background(
	$state : null
) {
	
	// variables :
	$context : _gridle_get_var_value(context, $state);

	position:relative;
	z-index:9999;
	&:before {
		content:'';
		position:absolute;
		top:0; left:0;
		width:100%; height:100% !important;
		// vars :
		$width : percentage(1 / $context);
		background: linear-gradient(to right, rgba(0,0,0,.01) 50% , rgba(0,0,0,.04) 50%); /* Standard syntax */
		background-size:($width*2) 100%;
		// background-position:$gridle-gutter-width/2 0;
	}
}


/**
 * Parent clear each
 */
// Grid mixin :
// Set the width of the specified grid column :
@mixin gridle_clear_each(
	$clearEach,
	$clearWhat : both,
	$state : null
) {
	// check if need media query :
	@if $state {
		@include gridle_state($state) {
			@include _gridle_clear_each($clearEach, $clearWhat, $state);
		}
	} @else {
		@include _gridle_clear_each($clearEach, $clearWhat, $state);
	}
}
@mixin _gridle_clear_each(
	$clearEach,
	$clearWhat,
	$state : null
) {
	> *:nth-child(#{$clearEach}n+1) {
		clear : $clearWhat;
	}
}


// Grid centered :
@mixin gridle_centered(
	$state : null
) {
	// check if need media query :
	@if $state {
		@include gridle_state($state) {
			@include _gridle_centered();
		}
	} @else {
		@include _gridle_centered();
	}
}
@mixin _gridle_centered() {
	display:block !important;
	float:none !important;
	margin-left:auto !important;
	margin-right:auto !important;
	clear:both !important;
}


// Grid parent :
@mixin gridle_parent(
	$state : null
) {
	// common :
	@include _gridle_parent_common();
	// check if need media query :
	@if $state {
		@include gridle_state($state) {
			@include _gridle_parent();
		}
	} @else {
		@include _gridle_parent();
	}
}
@mixin _gridle_parent() {
	@include gridle_no_gutter();
}


/**
 * Vertical align :
 */
@mixin gridle_parent_vertical_align(
	$align : middle,
	$state : null
) {
	// check if need media query :
	@if $state {
		@include gridle_state($state) {
			@include _gridle_parent_vertical_align($align);
		}
	} @else {
		@include _gridle_parent_vertical_align($align);
	}
}
@mixin _gridle_parent_vertical_align(
	$align : middle
) {
	> * {
		display:inline-block;
		float:none !important;
		vertical-align:$align;
	}
}


// Hide on :
// @param 	String 	$media  On what state
@mixin gridle_hide(
	$state : null
) {
	// check if need media query :
	@if $state {
		@include gridle_state($state) {
			@include _gridle_hide();
		}
	} @else {
		@include _gridle_hide();
	}
}
@mixin _gridle_hide() {
	display:none;
}


// Not visible on :
// @param 	String 	$media 	What to hide (one of the 3 state classes name)
@mixin gridle_not_visible(
	$state : null
) {
	// check if need media query :
	@if $state {
		@include gridle_state($state) {
			@include _gridle_not_visible();
		}
	} @else {
		@include _gridle_not_visible();
	}
}
@mixin _gridle_not_visible() {
	visibility:hidden;
}


// Show on
// @param 	String 	$media 	What to hide (one of the 3 state classes name)
@mixin gridle_show(
	$state : null
) {
	// check if need media query :
	@if $state {
		@include gridle_state($state) {
			@include _gridle_show();
		}
	} @else {
		@include _gridle_show();
	}
}
@mixin _gridle_show() {
	display:block;
}


// Visible on :
// @param 	String 	$media 	On what state
@mixin gridle_visible(
	$state : null
) {
	// check if need media query :
	@if $state {
		@include gridle_state($state) {
			@include _gridle_visible();
		}
	} @else {
		@include _gridle_visible();
	}
}
@mixin _gridle_visible() {
	visibility:visible;
}


// Gridle Right :
@mixin gridle_float(
	$float-direction : left,
	$state : null
) {
	// check if need media query :
	@if $state {
		@include gridle_state($state) {
			@include gridle_float($float-direction);
		}
	} @else {
		@include gridle_float($float-direction);
	}
}
@mixin gridle_float(
	$float-direction : left
) {
	float:#{$float-direction};
}


// Gridle clear :
// @param 	String 	$clear-direction 	The direction to clear
// @param 	String 	$state 				The state
@mixin gridle_clear(
	$clear-direction : both,
	$state : null
) {
	// check if need media query :
	@if $state {
		@include gridle_state($state) {
			@include _gridle_clear($clear-direction);
		}
	} @else {
		@include _gridle_clear($clear-direction);
	}
}
@mixin _gridle_clear(
	$clear-direction : both
) {
	clear:#{$clear-direction};
}


// Gridle no gutter :
// @param 	String 	$side 				The side to clear
// @param 	String 	$state 				The state
@mixin gridle_no_gutter(
	$side : left right,
	$state : null
) {
	// check if need media query :
	@if $state {
		@include gridle_state($state) {
			@include _gridle_no_gutter($side);
		}
	} @else {
		@include _gridle_no_gutter($side);
	}
}
@mixin gridle_no_margin(
	$side : left right,
	$state : null
) {
	@include gridle_no_gutter($side, $state);
}
@mixin _gridle_no_gutter(
	$side : left right
) {
	@each $s in $side {
		padding-#{$s} : 0 !important;
	}
}


// Gridle gutter :
// @param 	String 	$side 				The side to clear
// @param 	String 	$state 				The state
@mixin gridle_gutter(
	$side : left right,
	$state : null
) {
	// check if need media query :
	@if $state {
		@include gridle_state($state) {
			@include _gridle_gutter($side);
		}
	} @else {
		@include _gridle_gutter($side);
	}
}
// shortcut :
@mixin gridle_margin(
	$side : left right,
	$state : null
) {
	@include gridle_gutter($side, $state);
}
@mixin _gridle_gutter(
	$side : left right,
	$state : null
) {
	$gutter-width : _gridle_get_var_value(gutter-width, $state);
	@each $s in $side {
		padding-#{$s} : $gutter-width / 2;
	}
}