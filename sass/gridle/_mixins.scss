// |------------------------------------------------------
// |------------------------------------------------------
// | Mixins
// |------------------------------------------------------
// |------------------------------------------------------

@mixin init_silent_classes() {

	.hello {
		content : "world";
	}

		// loop on all states
		@each $stateName, $state in $_gridle_states {

			$name : gridle_get_state_var(name, $state);

			// init silent classes
			
			@include gridle_state($stateName) {
				%#{$stateName}-grid {
					// @include _gridle_grid_common();
					content : "#{$stateName}";
				}
			}
		}
	

}

// Helper to apply multiple config for a certain state with one mixin
@mixin gridle_set(
	$settings,
	$state : default
) {
	
	// loop on each settings
	@each $settingName, $settingValue in $settings
	{
		$sn : unquote("#{$settingName}");
		$sv : $settingValue;

		// check if setting name is a state :
		@if gridle_has_state($sn) {
			// process the state
			@include gridle_set($sv, $sn);
		} @else {
			@if $sn == container {
				@include gridle_container($state);
			} @else if $sn == grid {
				@include gridle($sv, $state);
			} @else if $sn == push {
				@include gridle_push($sv, $state);
			} @else if $sn == pull {
				@include gridle_pull($sv, $state);
			} @else if $sn == prefix {
				@include gridle_prefix($sv, $state);
			} @else if $sn == suffix {
				@include gridle_suffix($sv, $state);
			} @else if $sn == pull {
				@include gridle_pull($sv, $state);
			} @else if $sn == clear_each {
				@include gridle_clear_each(nth($sv,1), nth($sv,2), $state);
			} @else if $sn == centered {
				@include gridle_centered($state);
			} @else if $sn == parent {
				@include gridle_parent($state);
			} @else if $sn == vertical_align {
				@include gridle_vertical_align($sv, $state);
			} @else if $sn == hide {
				@if $sv == true {
					@include gridle_hide($state);
				} @else {
					@include gridle_show($state);
				}
			} @else if $sn == show {
				@if $sv == true {
					@include gridle_show($state);
				} @else {
					@include gridle_hide($state);
				}
			} @else if $sn == visible {
				@if $sv == true {
					@include gridle_visible($state);
				} @else {
					@include gridle_not_visible($state);
				}
			} @else if $sn == not_visible {
				@if $sv == true {
					@include gridle_not_visible($state);
				} @else {
					@include gridle_visible($state);
				}
			} @else if $sn == show_inline {
				@if $sv == true {
					@include gridle_show_inline($state);
				} @else {
					@include gridle_hide($state);
				}
			} @else if $sn == float {
				@include gridle_float($sv, $state);
			} @else if $sn == clear {
				@include gridle_clear($sv, $state);
			} @else if $sn == no_gutter
				or $sn == no_margin {
				@include gridle_no_gutter($sv, $state);
			} @else if $sn == gutter
				or $sn == margin {
				@include gridle_gutter($sv, $state);
			} @else {
				// we do nothing
			}
		}
	}
}

// Responsive helpers mixins :
@mixin gridle_state(
	$states,
	$has-parent : true
) {

	// check if is a min-max witdh query (compatibility layer)
	@if type-of($states) == number and type-of($has-parent) == number {

		// make a query
		@include gridle_state((
			min-width : $states,
			max-width : $has-parent
		)) {
			@content;
		}

	} @elseif gridle_has_state(nth($states,1)) {

		// loop on each states :
		@each $state in $states
		{
			// variables :
			$html-states-classes : gridle_get_state_var(html-states-classes, $state);
			$debug : gridle_get_state_var(debug, $state);
			$stateName : gridle_get_state_var(name, $state);

			// check if is a state :
			// @if ($html-states-classes or $debug)
			// 	and $stateName {
			// 	// html class :
			// 	@if $has-parent {
			// 		html#{_gridle_classname("#{$stateName}")} & { @content; }
			// 	} @else {
			// 		html#{_gridle_classname("#{$stateName}")} { @content; }
			// 	}
			// }

			// get the media query :
			$q : _gridle_get_media_query($state);

			// make the media query if a query exist :
			@if $q {
				@media #{$q} {
					@content;
				}
			}
			@else
			{
				@content;
			}
		}

	} @else {

		// variables :
		$html-states-classes : gridle_get_state_var(html-states-classes, $states);
		$debug : gridle_get_state_var(debug, $states);
		$stateName : gridle_get_state_var(name, $states);

		// check if is a state :
		// @if ($html-states-classes or $debug)
		// 	and $stateName {
		// 	// html class :
		// 	@if $has-parent {
		// 		html#{_gridle_classname("#{$stateName}")} & { @content; }
		// 	} @else {
		// 		html#{_gridle_classname("#{$stateName}")} { @content; }
		// 	}
		// }

		// get the media query :
		$q : _gridle_get_media_query($states);

		// make the media query if a query exist :
		@if $q {
			@media #{$q} {
				@content;
			}
		}
		@else
		{
			@content;
		}

	}
}



// Container mixin :
@mixin gridle_container(
	$states : default
) {
	@include _gridle_container_common($states);

	// check if need media query :
	@each $s in $states {
		@include gridle_state($s) {
			@include _gridle_container($s);
		}
	}
}
@mixin _gridle_container(
	$state : default
) {
	// extend
	$name : gridle_get_state_var(name, $state);
	$extend : gridle_get_extend_class_map(container, $name);
	@each $key, $value in $extend {
		#{$key}:#{$value};
	}
}

@mixin gridle_generate_silent_class(
	$for,
	$state : default
) {
	$map : map-get($_gridle_generated_extends, $for);
	@if $map == null { $map : (); }
	$stateName : gridle_get_state_var(name, $state);
	$extend : map-get($map, $stateName);
	@if $extend == null {
		$map : map-set($map, $stateName, true);
		$_gridle_generated_extends : map-set($_gridle_generated_extends, $for, $map) !global;
		// @at-root {
			// @include gridle_state($stateName) {
				%#{$stateName}-#{$for} {
				 	@content;
				}
				// %#{$stateName}-#{$for} {
				// 	@content;
				// }
		// 	}
		// }
		// @at-root {
		// 	%#{$stateName}-#{$for} {
		// 		@content;
		// 	}
		// }
	}
}

// Grid mixin :
// Set the width of the specified grid column :
@mixin gridle(
	$columns,
	$states-or-context : default,
	$states : default
) {
	// manage state and context :
	$context : null;
	@if type-of($states-or-context) == number {
		$context : $states-or-context;
	} @else {
		$state : $states-or-context;
	}

	// check if need media query :
	@each $s in $states {
		// generate silent class for grid and state
		@include gridle_state($s) {
			@include _gridle($columns, $s, $context);
		}
	}
}
@mixin _gridle(
	$columns,
	$state : default,
	$context : null
) {

	// vars :
	$name : gridle_get_state_var(name, $state);
	@if type-of($context) != number {
		$context : gridle_get_state_var(context, $state);
	}
	$name-multiplicator : gridle_get_state_var(name-multiplicator, $state);
	$gutter-width : gridle_get_state_var(gutter-width, $state);
	$ie7-support : gridle_get_state_var(ie7-support, $state);
	$debug : gridle_get_state_var(debug, $state);
	$debug-show-class-names : gridle_get_state_var(debug-show-class-names, $state);

	// extend
	@extend .#{$name}-grid;

	// manage columns
	@if type-of($columns) != number and map-has-key($_gridle_columns, $columns) {
		// the columns is a saved one, get the context and column value
		$column : map-get($_gridle_columns, $columns);
		$context : map-get($column, context);
		$columns : map-get($column, columns);
	} @else if type-of($columns) == number {
		$columns : $columns / $name-multiplicator;
	} @else {
		@error "the column #{$columns} does not exist...";
	}

	// vars :
	$width : percentage(1 / $context * $columns);

	// set value :
	width:$width;
	
	// ie7 support :
	@if $ie7-support == true {
		*width: expression((this.parentNode.clientWidth/#{$context}*#{($columns / $name-multiplicator)} - parseInt(this.currentStyle['paddingLeft']) - parseInt(this.currentStyle['paddingRight'])) + 'px');
	}
	
	// debug :
	@if $debug == true and $debug-show-class-names == true {
		#{$gridle-debug-selector} {
			&:before {
				@if $name == default {
					content:"grid-#{$name}-#{$columns}";
				} @else {
					content:"grid-#{$name}-#{$columns}" !important;
				}
			}
			&.parent:before {
				@if $name == default {
					content:"grid-parent-#{$name}-#{$columns}";
				} @else {
					content:"grid-parent-#{$name}-#{$columns}" !important;
				}
			}
		}
	}

	// extend
	$extend : gridle_get_extend_class_map(grid, $name);
	@each $key, $value in $extend {
		@if type-of($value) == string {
			#{$key}:"#{$value}";
		} @else {
			#{$key}:#{$value};
		}
	}
}


// push :
// Push the element of the count of column wanted
@mixin gridle_push(
	$columns,
	$states-or-context : default,
	$states : default
) {
	// manage state and context
	$context : null;
	@if type-of($states-or-context) == number {
		$context : $states-or-context;
	} @else {
		$states : $states-or-context;
	}

	// common :
	@include _gridle_push_common($states);

	// check if need media query :
	@each $s in $states {
		@include gridle_state($s) {
			@include _gridle_push($columns, $s, $context);
		}
	}
}
@mixin _gridle_push(
	$columns,
	$state : default,
	$context : null
) {
	// variables :
	$name : gridle_get_state_var(name, $state);
	@if type-of($context) != number {
		$context : gridle_get_state_var(context, $state);
	}
	$direction : gridle_get_state_var(direction, $state);
	$name-multiplicator : gridle_get_state_var(name-multiplicator, $state);
	$debug : gridle_get_state_var(debug, $state);
	$debug-show-class-names : gridle_get_state_var(debug-show-class-names, $state);

	// vars :
	$width : percentage(1 / $context) * ($columns / $name-multiplicator);
	@if $direction == rtl { $width : $width*-1; }
	left:$width;

	// debug css :
	@if $debug == true and $debug-show-class-names == true {
		#{$gridle-debug-selector} {
			&:after {
				@if $name == default {
					content:"push-#{$name}-#{$columns}";
				} @else {
					content:"push-#{$name}-#{$columns}" !important;
				}
			}
		}
	}

	// extend
	$extend : gridle_get_extend_class_map(push, $name);
	@each $key, $value in $extend {
		@if type-of($value) == string {
			#{$key}:"#{$value}";
		} @else {
			#{$key}:#{$value};
		}
	}

}


// pull :
// Pull the element of the count of column wanted
@mixin gridle_pull(
	$columns,
	$states : default
) {
	// common :
	@include _gridle_pull_common($states);

	// check if need media query :
	@each $s in $states {
		@include gridle_state($s) {
			@include _gridle_pull($columns,$s);
		}
	}
}
@mixin _gridle_pull(
	$columns,
	$state : default
) {
	// vars :
	$name : gridle_get_state_var(name, $state);
	$context : gridle_get_state_var(context, $state);
	$direction : gridle_get_state_var(direction, $state);
	$name-multiplicator : gridle_get_state_var(name-multiplicator, $state);
	$debug : gridle_get_state_var(debug, $state);
	$debug-show-class-names : gridle_get_state_var(debug-show-class-names, $state);

	// vars :
	$width : percentage(1 / $context) * ($columns / $name-multiplicator);
	@if $direction == rtl { $width : $width*-1; }
	right:$width;

	// debug css :
	@if $debug == true and $debug-show-class-names == true {
		#{$gridle-debug-selector} {
			&:after {
				@if $name == default {
					content:"pull-#{$name}-#{$columns}";
				} @else {
					content:"pull-#{$name}-#{$columns}" !important;
				}
			}
		}
	}

	// extend
	$extend : gridle_get_extend_class_map(pull, $name);
	@each $key, $value in $extend {
		@if type-of($value) == string {
			#{$key}:"#{$value}";
		} @else {
			#{$key}:#{$value};
		}
	}
}


// push :
// Push the element of the count of column wanted
@mixin gridle_prefix(
	$columns,
	$states : default
) {
	// common :
	@include _gridle_prefix_common($states);
	
	// check if need media query :
	@each $s in $states {
		@include gridle_state($s) {
			@include _gridle_prefix($columns,$s);
		}
	}
}
@mixin _gridle_prefix(
	$columns,
	$state : default
) {
	// vars :
	$name : gridle_get_state_var(name, $state);
	$context : gridle_get_state_var(context, $state);
	$direction : gridle_get_state_var(direction, $state);
	$gutter-width : gridle_get_state_var(gutter-width, $state);
	$name-multiplicator : gridle_get_state_var(name-multiplicator, $state);
	$debug : gridle_get_state_var(debug, $state);
	$debug-show-class-names : gridle_get_state_var(debug-show-class-names, $state);

	// vars :
	$width : percentage(1 / $context) * ($columns / $name-multiplicator);

	// set value :
	@if $direction == rtl { margin-right:$width; }
	@else { margin-left:$width; }

	// debug css :
	@if $debug == true and $debug-show-class-names == true {
		#{$gridle-debug-selector} {
			&:after {
				@if $name == default {
					content:"prefix-#{$name}-#{$columns}";
				} @else {
					content:"prefix-#{$name}-#{$columns}" !important;
				}
			}
		}
	}

	// extend
	$extend : gridle_get_extend_class_map(prefix, $name);
	@each $key, $value in $extend {
		@if type-of($value) == string {
			#{$key}:"#{$value}";
		} @else {
			#{$key}:#{$value};
		}
	}
}


// pull :
// Pull the element of the count of column wanted
@mixin gridle_suffix(
	$columns,
	$states : default
) {
	// common :
	@include _gridle_suffix_common($states);

	// check if need media query :
	@each $s in $states {
		@include gridle_state($s) {
			@include _gridle_suffix($columns,$s);
		}
	}
}
@mixin _gridle_suffix(
	$columns,
	$state : default
) {
	// vars :
	$name : gridle_get_state_var(name, $state);
	$context : gridle_get_state_var(context, $state);
	$direction : gridle_get_state_var(direction, $state);
	$gutter-width : gridle_get_state_var(gutter-width, $state);
	$name-multiplicator : gridle_get_state_var(name-multiplicator, $state);
	$debug : gridle_get_state_var(debug, $state);
	$debug-show-class-names : gridle_get_state_var(debug-show-class-names, $state);

	// vars :
	$width : percentage(1 / $context) * ($columns / $name-multiplicator);
	
	// set value :
	@if $direction == rtl { margin-left:$width; }
	@else { margin-right:$width; }

	// debug css :
	@if $debug == true and $debug-show-class-names == true {
		#{$gridle-debug-selector} {
			&:after {
				@if $name == default {
					content:"suffix-#{$name}-#{$columns}";
				} @else {
					content:"suffix-#{$name}-#{$columns}" !important;
				}
			}
		}
	}

	// extend
	$extend : gridle_get_extend_class_map(suffix, $name);
	@each $key, $value in $extend {
		@if type-of($value) == string {
			#{$key}:"#{$value}";
		} @else {
			#{$key}:#{$value};
		}
	}
}


// grid background :
// Display the grid background debug
@mixin gridle_grid_background(
	$states : default
) {
	// check if need media query :
	@each $s in $states {
		@include gridle_state($s) {
			@include _gridle_grid_background($s);
		}
	}
}
@mixin _gridle_grid_background(
	$state : default
) {
	
	// variables :
	$context : gridle_get_state_var(context, $state);

	position:relative;
	z-index:9999;
	&:before {
		content:'';
		position:absolute;
		top:0; left:0;
		width:100%; height:100% !important;
		// vars :
		$width : percentage(1 / $context);
		background: linear-gradient(to right, rgba(0,0,0,.01) 50% , rgba(0,0,0,.04) 50%); /* Standard syntax */
		background-size:($width*2) 100%;
		// background-position:$gridle-gutter-width/2 0;
	}
}


/**
 * Parent clear each
 */
// Grid mixin :
// Set the width of the specified grid column :
@mixin gridle_clear_each(
	$clearEach,
	$clearWhat : both,
	$states : default
) {
	// check if need media query :
	@each $s in $states {
		@include gridle_state($s) {
			@include _gridle_clear_each($clearEach, $clearWhat, $s);
		}
	}
}
@mixin _gridle_clear_each(
	$clearEach,
	$clearWhat,
	$state : default
) {
	> *:nth-child(#{$clearEach}n+1) {
		clear : $clearWhat;
	}

	// extend
	$name : gridle_get_state_var(name, $state);
	$extend : gridle_get_extend_class_map(cleat_each, $name);
	@each $key, $value in $extend {
		@if type-of($value) == string {
			#{$key}:"#{$value}";
		} @else {
			#{$key}:#{$value};
		}
	}
}


// Grid centered :
@mixin gridle_centered(
	$states : default
) {
	// check if need media query :
	@each $s in $states {
		@include gridle_state($s) {
			@include _gridle_centered($s);
		}
	}
}
@mixin _gridle_centered(
	$state : default
) {
	display:block !important;
	float:none !important;
	margin-left:auto !important;
	margin-right:auto !important;
	clear:both !important;

	// extend
	$name : gridle_get_state_var(name, $state);
	$extend : gridle_get_extend_class_map(centered, $name);
	@each $key, $value in $extend {
		@if type-of($value) == string {
			#{$key}:"#{$value}";
		} @else {
			#{$key}:#{$value};
		}
	}
}


// Grid parent :
@mixin gridle_parent(
	$states : default
) {
	// common :
	@include _gridle_parent_common();
	// check if need media query :
	@each $s in $states {
		@include gridle_state($s) {
			@include _gridle_parent($s);
		}
	}
}
@mixin _gridle_parent(
	$state : default
) {
	@include gridle_no_gutter();
	// extend
	$name : gridle_get_state_var(name, $state);
	$extend : gridle_get_extend_class_map(parent, $name);
	@each $key, $value in $extend {
		@if type-of($value) == string {
			#{$key}:"#{$value}";
		} @else {
			#{$key}:#{$value};
		}
	}
}


/**
 * Vertical align :
 */
@mixin gridle_vertical_align(
	$align : middle,
	$states : default
) {
	// check if need media query :
	@each $s in $states {
		@include gridle_state($s) {
			@include _gridle_vertical_align($align, $s);
		}
	}
}
@mixin _gridle_vertical_align(
	$align : middle,
	$state : default
) {
	font-size:0;
	clear:both;

	> * {
		display:inline-block;
		float:none !important;
		vertical-align:$align;
		font-size:1rem;
	}

	// extend
	$name : gridle_get_state_var(name, $state);
	$extend : gridle_get_extend_class_map(vertical_align, $name);
	@each $key, $value in $extend {
		@if type-of($value) == string {
			#{$key}:"#{$value}";
		} @else {
			#{$key}:#{$value};
		}
	}
}


// Hide on :
// @param 	String 	$media  On what state
@mixin gridle_hide(
	$states : default
) {
	// check if need media query :
	@each $s in $states {
		@include gridle_state($s) {
			@include _gridle_hide($s);
		}
	}
}
@mixin _gridle_hide(
	$state : default
) {
	display:none;

	// extend
	$name : gridle_get_state_var(name, $state);
	$extend : gridle_get_extend_class_map(hide, $name);
	@each $key, $value in $extend {
		@if type-of($value) == string {
			#{$key}:"#{$value}";
		} @else {
			#{$key}:#{$value};
		}
	}
}


// Not visible on :
// @param 	String 	$media 	What to hide (one of the 3 state classes name)
@mixin gridle_not_visible(
	$states : default
) {
	// check if need media query :
	@each $s in $states {
		@include gridle_state($s) {
			@include _gridle_not_visible($s);
		}
	}
}
@mixin _gridle_not_visible(
	$state : default
) {
	visibility:hidden;

	// extend
	$name : gridle_get_state_var(name, $state);
	$extend : gridle_get_extend_class_map(not_visible, $name);
	@each $key, $value in $extend {
		@if type-of($value) == string {
			#{$key}:"#{$value}";
		} @else {
			#{$key}:#{$value};
		}
	}
}


// Show on
// @param 	String 	$media 	What to hide (one of the 3 state classes name)
@mixin gridle_show(
	$states : default
) {
	// check if need media query :
	@each $s in $states {
		@include gridle_state($s) {
			@include _gridle_show($s);
		}
	}
}
@mixin _gridle_show(
	$state : default
) {
	display:block;

	// extend
	$name : gridle_get_state_var(name, $state);
	$extend : gridle_get_extend_class_map(show, $name);
	@each $key, $value in $extend {
		@if type-of($value) == string {
			#{$key}:"#{$value}";
		} @else {
			#{$key}:#{$value};
		}
	}
}


/**
 * Show inline
 *
 * @param 	String 		$state 		The state name
 */
@mixin gridle_show_inline(
	$states : default
) {
	// check if need media query :
	@each $s in $states {
		@include gridle_state($s) {
			@include _gridle_show_inline($s);
		}
	}
}
@mixin _gridle_show_inline(
	$state : default
) {
	display:inline-block;

	// extend
	$name : gridle_get_state_var(name, $state);
	$extend : gridle_get_extend_class_map(show_inline, $name);
	@each $key, $value in $extend {
		@if type-of($value) == string {
			#{$key}:"#{$value}";
		} @else {
			#{$key}:#{$value};
		}
	}
}


// Visible on :
// @param 	String 	$media 	On what state
@mixin gridle_visible(
	$states : default
) {
	// check if need media query :
	@each $s in $states {
		@include gridle_state($s) {
			@include _gridle_visible($s);
		}
	}
}
@mixin _gridle_visible(
	$state : default
) {
	visibility:visible;

	// extend
	$name : gridle_get_state_var(name, $state);
	$extend : gridle_get_extend_class_map(visible, $name);
	@each $key, $value in $extend {
		@if type-of($value) == string {
			#{$key}:"#{$value}";
		} @else {
			#{$key}:#{$value};
		}
	}
}


// Gridle Right :
@mixin gridle_float(
	$float-direction : left,
	$states : default
) {
	// check if need media query :	
	@each $s in $states {
		@include gridle_state($s) {
			@include _gridle_float($float-direction, $s);
		}
	}
}
@mixin _gridle_float(
	$float-direction : left,
	$state : default
) {
	float:#{$float-direction};

	// extend
	$name : gridle_get_state_var(name, $state);
	$extend : gridle_get_extend_class_map(float, $name);
	@each $key, $value in $extend {
		@if type-of($value) == string {
			#{$key}:"#{$value}";
		} @else {
			#{$key}:#{$value};
		}
	}
}


// Gridle clear :
// @param 	String 	$clear-direction 	The direction to clear
// @param 	String 	$state 				The state
@mixin gridle_clear(
	$clear-direction : both,
	$states : default
) {
	@each $s in $states {
		@include gridle_state($s) {
			@include _gridle_clear($clear-direction, $s);
		}
	}
}
@mixin _gridle_clear(
	$clear-direction : both,
	$state : default
) {
	clear:#{$clear-direction};

	// extend
	$name : gridle_get_state_var(name, $state);
	$extend : gridle_get_extend_class_map(clear, $name);
	@each $key, $value in $extend {
		@if type-of($value) == string {
			#{$key}:"#{$value}";
		} @else {
			#{$key}:#{$value};
		}
	}
}


// Gridle no gutter :
// @param 	String 	$side 				The side to clear
// @param 	String 	$state 				The state
@mixin gridle_no_gutter(
	$side : left right,
	$states : default
) {
	// check if need media query :
	@each $s in $states {
		@include gridle_state($s) {
			@include _gridle_no_gutter($side, $s);
		}
	}
}
@mixin gridle_no_margin(
	$side : left right,
	$state : default
) {
	@include gridle_no_gutter($side, $state);
}
@mixin _gridle_no_gutter(
	$side : left right,
	$state : default
) {
	@each $s in $side {
		padding-#{$s} : 0;
	}

	// extend
	$name : gridle_get_state_var(name, $state);
	$extend : gridle_get_extend_class_map(no_gutter, $name);
	@each $key, $value in $extend {
		@if type-of($value) == string {
			#{$key}:"#{$value}";
		} @else {
			#{$key}:#{$value};
		}
	}
}


// Gridle gutter :
// @param 	String 	$side 				The side to clear
// @param 	String 	$state 				The state
@mixin gridle_gutter(
	$side : left right,
	$states : default
) {
	// check if need media query :
	@each $s in $states {
		@include gridle_state($s) {
			@include _gridle_gutter($side, $s);
		}
	}
}
// shortcut :
@mixin gridle_margin(
	$side : left right,
	$state : default
) {
	@include gridle_gutter($side, $state);
}
@mixin _gridle_gutter(
	$side : left right,
	$state : default
) {
	$gutter-width : gridle_get_state_var(gutter-width, $state);
	@each $s in $side {
		padding-#{$s} : $gutter-width / 2;
	}

	// extend
	$name : gridle_get_state_var(name, $state);
	$extend : gridle_get_extend_class_map(gutter, $name);
	@each $key, $value in $extend {
		@if type-of($value) == string {
			#{$key}:"#{$value}";
		} @else {
			#{$key}:#{$value};
		}
	}
}